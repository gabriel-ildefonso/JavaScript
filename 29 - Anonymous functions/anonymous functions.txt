Anonymous functions are functions that have no name. One of its applications is the storage of functions in variables.


In JavaScript, and in other languages that support the functional paradigm, functions can be read as values, or even stored in variables.

function sum(a, b){
   return a + b
}

const operation = sum //Note that there are no parentheses in sum.

If it were const operation = sum(), the variable 'operation' would receive the value of the result of the function 'sum'. Without the parentheses, the 'operation' variable is the same as the 'sum' function itself.

function sum(a, b){
   return a + b
}

let operation = sum
console.log(operation(4, 5))

operation = function (a, b){
   return a - b
}
console.log(operation(4, 5))

>>>
9
-1
So we created a function directly inside a variable, changing the behavior of a function, so that it was not necessary to name the function.

As with 'var', functions created with 'function' are loaded at the beginning of the file. The same does not happen with anonymous functions, since they can only be accessed after they have been declared.

helloWorld()
hiWorld()

function helloWorld(){
   console.log('Hello world')
}

const hiWorld = funtion(){
   console.log('Hi world')
}

>>>>
hello world
ReferenceError: Cannot access 'hiWorld' before initialization