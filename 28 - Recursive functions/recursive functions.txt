A recursive function is a function that invokes itself, which creates a stack of repeating function calls. Basically it's a function that calls itself and executes itself again, creating the effect called 'recursion'.

The function below receives a number, prints the number on the console, if the number is even, the function will divide the number by 2 and restart the function, printing the number on the console, checking if the new number is even, and will continue in this loop until an odd number comes up as a result

function divide(num){
   console.log(num)
   if (num % 2 === 0){
     divide(num / 2)
   } else{
     return num
   }
}

divide(40)
>>>
40
20
10
5

Care must be taken so that the results are different, if it is always the same number, the function would be executed forever, always being the same number, always even, and the function would be executed until the 'call stack' was exhausted.
Whenever a function is invoked, it is placed on a stack, with a next call, it will also be stacked, before the completion of the previous function. It works like this:
If inside the first function there is another function, the second function will be executed before the completion of the first one. If the second function has a third function inside it, the third function will be executed before the completion of the second one. This will occur until the last function is resolved so that previous functions can be terminated.
// Works as if multiple Microsoft Excel 'SE' formulas were nested, one inside the other. But the JS works backwards, resolving the last function, then the penultimate, the antepenultimate, and so on until all are resolved.

As previously stated, care must be taken when working with recursion so that an infinite loop is not created. Differently from repetition loops, in repetition the functions created are not resolved before reaching infinity, so the program will run out of capacity before finishing the recursion, as is the case with the function below:

function double(num){
   console.log(num)
   double(num * 2)
}
double(1)
>>> 1, 2, 4, 8, 16, 32, 64 ........
will double the numbers reached to infinity, causing an error in program execution.

An interesting case of applying recursion is in calculating factorials:

// factorial of 5: 5! === 5 * 4 * 3 * 2 * 1 === 5 * 4!
function factorial(num){
   console.log('Number: ' + num)
   if (num === 0){
     return 1 // the factorial of 0 is 1
   } else if(num === 1){
     return 1
   } else {
     console.log(num + ' * !' + (num - 1))
     return num * factorial(num - 1)
   }
}

console.log(factorial(5))