Uma high-order function nada mais é do que uma função que recebe outra função como parâmetro.

function calcular(a, b, operação){  //note que o parâmetro 'operação' é uma função, mas é declarado sem parênteses
  console.log('realizando uma operação')
  const resultado = operação(a, b)
  return resultado
}

No caso apresentado, dizemos que a função mais externa, 'calcular', é uma high-order function.
Uma das aplicações é trasnformar o comportamento de uma função.

function calcular(a, b, operação){  
  console.log('realizando uma operação')
  const resultado = operação(a, b)
  return resultado
}

function soma(x, y){
  console.log('Realizando uma soma.')
  return x + y
}

calcular(3, 5, soma) 
>>> 8   //Com isso, informamos 3 e 5 como parâmetros da função calcular, e a função 'soma' substituiu a função 'operação' dentro da função 'calcular'

Também é possível utilizar high-order functions com funções anônimas.

calcular(8, 4, function(x, y){
  console.log('realizando uma subtração')
  return x - y
})
>>>
4

Outro exemplo de aplicação de high-order functions 

function exibirElemento(elemento, indice, array){
  console.log({
    elemento,
    indice,
    array
  })
}

const lista = ['maçã', 'banana', 'laranja', 'limão']

for (let i = 0; i < lista.legth; i++){
  exibirElemento(lista[i], i, lista)
}
>>>
'maçã', índice: 0, array ....


Um outro exemplo de high-order function é o método 'forEach', que serve para executar uma função para cada item de um array.

lista.forEach(exibirElemento) //para cada item da lista, execute a função exibirElemento
>>> retorna o mesmo resultado, mas com muito menos trabalho

Também é possível utilizar o 'forEach' com funções anônimas:
lita.forEach(function(elemento, índice, array) {
  console.log({
    elemento,
    índice,
    array
  })
})


O uso do 'forEach' ddeixa o código muito mais legível, usando o paradigma funcional e mais organizado.

Próxima aula JS II, 22